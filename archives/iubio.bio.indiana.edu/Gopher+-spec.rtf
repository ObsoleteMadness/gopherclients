{\rtf1\mac\deff2 {\fonttbl{\f0\fswiss Chicago;}{\f1\fnil Geneva;}{\f2\froman New York;}{\f3\fswiss Geneva;}{\f4\fmodern Monaco;}{\f5\fscript Old English Text;}{\f13\fnil Zapf Dingbats;}{\f14\fnil Bookman;}{\f15\fnil N Helvetica Narrow;}{\f16\fnil Palatino;}
{\f18\fnil Zapf Chancery;}{\f20\froman Times;}{\f21\fswiss Helvetica;}{\f22\fmodern Courier;}{\f23\ftech Symbol;}{\f33\fnil Avant Garde;}{\f2000\fnil Lucida Bright;}{\f2002\fnil Helvetica Compressed;}{\f2007\fnil Delphian;}{\f2017\fnil Garamond Narrow;}
{\f2024\fnil Machine;}{\f2029\fnil Nadianne;}{\f2036\fnil Helvetica Black;}{\f2038\fnil Onyx;}{\f2040\fnil Oxford;}{\f2046\fnil Swing;}{\f2052\fnil Zeal;}}{\colortbl\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\f20\fs20 \sbasedon222\snext0 Normal;}}\margl1440\margr2120 \sectd \sbknone\linemod0\linex0\cols1 {\footer \pard\plain \f20\fs20 {\f21\fs18 \par 
}\pard \ri-680\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960 {\f21\fs18 July 30, 1993\tab \tab \tab \tab \tab \tab \tab \tab \tab    \tab page   }{\f21\fs18 \chpgn }{
\f21\fs18 \par 
}}\pard\plain \qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 \f20\fs20 {\b\fs36 Gopher+\par 
\par 
}{\b\fs28 upward compatible enhancements to \par 
the Internet Gopher protocol\par 
}{\plain \f20 \par 
\par 
Farhad Anklesaria, Paul Lindner, Mark P.  McCahill, \par 
Daniel Torrey, David Johnson, Bob Alberti   \par 
Microcomputer and Workstation  Networks Center / Computer and Information Systems\par 
University of Minnesota\par 
July 30, 1993\par 
}{\b\f16\fs36 \par 
}\pard \tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\f16 \par 
}{\b\f22 gopher+}{\f22 
  n.  1. Hardier strains of mammals of the family  Geomyidae.  2. (Amer. colloq.) Native or inhabitant of  Minnesota, the Gopher state, in full winter regalia (see  PARKA).  3. (Amer. colloq.) Executive secretary.  4.  (computer tech.) Software following a
 simple protocol for  burrowing through a TCP/IP internet, made more powerful by  simple enhancements (see CREEPING FEATURISM).\par 
}{\b\f16\fs28 \par 
Abstract\par 
}{\plain \f20 The internet Gopher protocol was designed for distributed  document search and retrieval. The documents "The internet 
 Gopher protocol: a distributed document search and retrieval protocol"  and internet RFC 1436 describe the basic  protocol and has an overview of how to implement new client  and server applications. This document describes a set of enhancements to the sy
ntax, semantics and functionality of  the original Gopher protocol.\par 
\par 
Distribution of this document is unlimited.  Please send  comments to the Gopher development team:  <gopher@boombox.micro.umn.edu>.  Implementation of  the  mechanisms described here is encouraged. \par 
\par 
\par 
}{\b\f16\fs28 1.\tab Introduction\par 
}{\plain \f20 
The Internet Gopher protocol was designed primarily to act as a distributed document  delivery system.  It has enjoyed increasing popularity, and  is being used for purposes that were not visualized when the  protocol was first outlined.  The rest of this 
document  describes the Gopher+ enhancements in a non-rigorous but easily read and understood  way.  There is a short BNF-like section at the end for exact  syntax descriptions.  Throughout the document, "\'c6" stands  for the AS
CII TAB character. There is an implicit carriage  return and linefeed at the ends of lines; these will only be explicitly  mentioned where necessary to avoid confusion. To understand  this document, you really must be familiar with the basic  Gopher protoc
ol.\par 
\par 
Servers and clients understanding the Gopher+ extensions will transmit extra information at the ends of list and request lines.  Old, basic gopher clients ignore such information.  New  Gopher+ aware servers continue to work at their old level  with u
nenhanced clients.  The extra information that can be  communicated by Gopher+ clients may be used to summon new capabilities to bridge  the most keenly felt shortcomings of the venerable old  Gopher.\par 
\par 
\par 
\par 
}{\b\f16\fs28 2. \tab How does Gopher+ work?\par 
}{\plain \f20 
Gopher+ enhancements rely on transmitting an "extra" tab  delimited fields beyond what regular (old) Gopher servers and clients now use.  If most existing (old)  clients were to encounter extra stuff beyond the "port"  field in a list (directory), most wou
ld ignore it. Gopher+  servers will return item descriptions in this form:\par 
\par 
\tab }{\f22 1Display string\'c6selector string\'c6host\'c6port\'c6extra stuff<CRLF>\par 
}{\plain \f20 \par 
If an existing (old) client has problems with additional  information beyond the port, it should not take much more  than a simple tweak to have it discard unneeded stuff.\par 
\par 
\par 
\par 
}{\plain \b\f20 2.1\tab Advisory issued to client maintainers.\par 
}{\plain \f20 If it does not do this already, your existing client should be modified  as soon as possible to ignore extra fields beyond what it  expects to find.  This will ensure thatyour clien
ts does not break  when it encounters Gopher+ servers in gopherspace.\par 
\par 
All the regular Gopher protocol info remains intact except for:\par 
\par 
(1)  Instead of just a CRLF after the port field in any item  of a list (directory) there may be an optional TAB followed  by extra stuff as noted above (explanation to follow).\par 
     \par 
(2) In the original Gopher protocol, there was provision for a date-time descriptor (sec 3.6) to be sent  after the selector (for use by autoindexer beasts).  As far  as we know, while the des
criptor is implemented in the Mac  server, it is not in any other server and no clients or  daemons use it.  This is a good time to withdraw this feature. The basic gopher  protocol has been revised for the final time and will be  frozen.\par 
 \par 
\par 
\par 
\par 
}{\plain \b\f20 2.2\tab Gopher+ item lists.\par 
}{\plain \f20 Gopher servers that can utilize the Gopher+ enhancements  will send some additional stuff (frequently the character "+") after the port field describing any list item.  eg:\par 
\par 
}{\f22 1Some old directory\'c6foo selector\'c6host1\'c6port1\par 
1Some new directory\'c6bar selector\'c6host1\'c6port1\'c6+\par 
0Some file or other\'c6moo selector\'c6host2\'c6port2\'c6+\par 
\par 
}{\plain \f20 
The first line is the regular old gopher item description. The second line is new Gopher+  item description.  The third line is a Gopher+ description of a document. Old  gopher clients can request the latter two items using old  format gopher selector stri
ngs and retrieve the items. New,  Gopher+ savvy clients will notice the trailing + and know that they can do extra  things with these kinds of items.\par 
\par 
\par 
\page }{\plain \b\f20 2.3\tab Gopher+ data transfer.\par 
}{\plain \f20 If a client sends out a Gopher+ type request to a server (by  tagging on a tab and a "+" to the request):\par 
\par 
\tab }{\f22 bar selector\'c6+\par 
}{\plain \f20 \par 
The server may return the response in one of three ways; examples  below:\par 
\par 
}{\f22   +5340<CRLF><data>\par 
  \par 
  +-1<CRLF><data><CRLF>.<CRLF>\par 
  \par 
  +-2<CRLF><data>\par 
}{\plain \f20 \par 
The first response means: I am going to send exactly  5340 bytes at you and they will begin right after this line.  The second response means: I have no idea how many bytes I  have to send (or I am lazy), but I will send a period on a  l
ine by itself when I am done.  The  third means:  I really  have no idea how many bytes I have to send, and what's more,  they COULD contain the <CRLF>.<CRLF> pattern, so just read until I close  the connection.\par 
\par 

The first character of a response to a Gopher+ query denotes  success (+) or failure (-). Following that is a token to be  interpreted as a decimal number. If the number is >= 0, it  describes the length of the dataBlock. If = -1, it means the  data is per
iod terminated. If = -2, it means the data ends  when the connection closes.  \par 
\par 
The server may return an error also, as in:\par 
}{\f22 \par 
--1<CRLF><data><CRLF>.<CRLF>\par 
\par 
}{\plain \f20 
The (short!) error message will be in ASCII text in the data part.  The first token on the  first line of the error text (data) contains an error-code  (an integer).  It is recommended that the first line also  contain  the e-mail address of the administra
tor of the  server (in angle brackets). Both the error-code and the email address may easily be  extracted by the client.  Subsequent lines contain a short  error message that may be displayed to the user. Basic error  codes are:\par 
\par 
\tab 1\tab Item is not available.\par 
\tab 2\tab Try again later ("eg.  My load is too high right now.")\par 
\tab 3\tab Item has moved.  Following the error-code is the  gopher descriptor\par 
\tab \tab of where it now lives.\par 
\par 
More error codes may be defined as the need arises.\par 
\par 
}{\f22 \par 
}{\plain \f20 This should be obvious: if the client sends out an "old"  Gopher kind of request:\par 
   \par 
    }{\f22 bar selector\par 
}{\plain \f20    \par 
the server will know that it is talking to an old client and  will respond in the old way. This means that old gopher  clients can still access information on Gopher+ servers.\par 
\par 
\par 
\par 
}{\plain \b\f20 2.4\tab Gopher+ client requests.\par 
}{\plain \f20 \par 
Clients can send requests to retrieve the contents of an item in this form:\par 
}{\f22 \par 
\tab selectorstring\'c6+[representation][\'c6dataFlag]<CRLF>[datablock ]\par 
}{\plain \f20 \par 
If dataFlag is '0', or nonexistent, then the client will not  send any data besides the selector string.  If the dataFlag  is '1' then a block of data will follow in the same format as Section 2.3.  The  client can send a large amount of data t
o the server in the  dataBlock.  Representations or alternative views of an  item's contents may be discovered by interrogating the  server about the item's attribute information; this is explained below.\par 
\par 

Note that in the original Gopher protocol, a query submitted to an index server might have a selector string followed by a TAB and the words for which the index server was being asked to search. In Gopher+, the extra TAB and Gopher+ information follow the 
words for which the server is being asked to search. Gopher+ client have to be smart enough to know that in the case of a type 7 item (an index server) they append the Gopher+ information after the words being searched for.\par 
\par 
\par 
}{\plain \b\f20 2.5\tab Gopher+ Item Attribute Information.\par 
}{\plain \f20 \par 

The most basic enhancement of Gopher+ items is the ability  to associate information about an item such as size, alternative views, the administrator, an abstract, etc. with the item. To get Attribute Information, a client can  send out a request to the go
pher server that looks like  this:\par 
\par 
\tab }{\f22 selector string\'c6!<CRLF>\par 
}{\plain \f20 \par 

(think of "!" as an upside-down i for "information"). To the  server this means "Instead of returning the contents of the item, return the item's Attribute  Information". The Attribute Information is returned as an  ASCII text stream containing blocks of i
nformation.For  example, a server might return:\par 
\par 
\tab }{\f22 +INFO: 0Some file or other\'c6moo selector\'c6host2\'c6port2\'c6+\par 
\tab +ADMIN:\par 
}{\plain \f20 \tab }{\f22  Admin: Frodo Gophermeister <fng@bogus.edu> \par 
}{\plain \f20  }{\f22 \tab  Mod-Date: Wed Jul 28 17:02:01 1993 <19930728170201>\par 
\tab +VIEWS: \par 
}{\plain \f20 \tab }{\f22  Text/plain: <10k>\par 
}{\plain \f20 \tab }{\f22  application/postscript: <100k>\par 
}{\plain \f20 \tab }{\f22  Text/plain De_DE: <15k>\par 
       application/MacWriteII: <45K>\par 
}{\plain \f20 \tab }{\f22 +ABSTRACT: \par 
}{\plain \f20 \tab }{\f22  This is a short (but multi-line) abstract about the\par 
}{\plain \f20 \tab }{\f22  item. Two or three lines ought to be enough\par 
}{\plain \f20 \par 

The beginning of a block of information is denoted by a "+"  in column 1 of  a line. Another way to think of it is: the  name of each block begins with a + and the rest of the name cannot contain a +. Each line of information within a block  begins with a 
space so that it is easy to locate the beginning of a block. \par 
\par 
There can be multiple blocks of information about an item,  but the first block }{\plain \i\f20 must}{\plain \f20 
 be the one-line +INFO block  containing the keyword +INFO followed by the gopher item  description. This is done to make it easy to associate  informational attributes with the gopher items to which they  refer (see section 2.7 for some good reasons for d
oing  this). The very first line of Attribute Information for an item contains a one-line +INFO block  containing the gopher descriptor for the 
item.  All Gopher+  servers must return an "+INFO" block for all items listed by  the server. Also present may be an +ADMIN block that can be  many lines long.  The server must also send an +ADMIN block when asked to  send all the item's attributes (as in 
the example above).   The +ADMIN block must contain at least an Admin attribute  and Mod-Date attributes, though there may be many other  administrative items also present in the +ADMIN block.  The Admin (the  administrator of the item) and Date (the date 
of the item's  last modification) attributes are required to be returned by  the server, and other optional attributes may be returned as  well.  In this example, there are two pieces of information within the +ADMIN block  (Admin and Mod-Date). The Admin 
attribute must contain the  e-mail address of an administrator inside angle brackets.  The Admin line might also contain the administrator's name  and phone number. The Date line must contain the modification date in angle  brackets. The format of the date
 is <YYYYMMDDhhmmss> where  YYYY is year, MM is month, DD is day, hh is hours, mm is  minutes, and ss is seconds.\par 
\par 

The third block in the example is the +VIEWS block. This block lists different formats in which the document can be  retrieved. The first format listed is what the server  believes to be the preferred format. A gopher client might  display the list of poss
ible view labels of the item to the  user and let the user select the view they prefer. Alternatively, a smart client  might look at the cont
ent of the labels and preferentially  retrieve Postscript views of items. Note that the view  labels are structured. View labels specify a Content-Type  (application/Postscript, Text/plain, etc.), an optional language (En_US, De_DE, etc.)  and an optional 
size. Note that the View labels for content type use the MIME content types to specify names of the variious views. The optional language descriptors use the ISO-639 codes for representing languages to name the language. Smart clients might want to transla
te these rather cryptic codes into something mere mortals can read and understand.\par 
\par 

The client software can pick off the  size of each view IF there are any angle brackets on the  line. There might not be a size that the server cares to  tell you about. Also this might NOT be the exact size that the server will wind up  delivering to you 
if you ask for it... but it should be  reasonably close. This information makes it possible for  clever clients to select views based on size, data  representation, or language. See section 2.6 for how alternate representations (views) are  retrieved. 
\par 
\par 
The next block in the example is an (optional) +ABSTRACT.  Here the block consists of lines of text that might be  displayed to the user. \par 
\par 

Other blocks of information can defined and added as the need arises. For instance, a Neuromancer-esque 3-D   cyberspace attribute might be accommodated by including a  3D-ICON block (with an image to display in 3-space) and a  3D-COORDINATE block (with y,
x, and z coordinates). More  immed
iate needs can also addressed by defining other information blocks. For  instance, a SCRIPT block would be a natural place to put  information for scripting telnet sessions. Information  blocks give us an extensible way of adding attributes (or  what Macin
tosh programmers call resources) to gopher items. \par 
\par 
Some of the really cool ideas we have for information  attributes may require sending large amounts of data, some  of which may not be easily represented as ASCII text, but  the idea of the attributes inf
ormation is that it is a relatively compact list of attributes. These somewhat  conflicting desires can be reconciled by allowing references  to gopher items in an attribute. For example, an +ABSTRACT  block might be returned this way:\par 
\par 
\tab }{\f22 +ABSTRACT: 0long abstract\'c6selector\'c6host2\'c6port2\'c6+\par 
}{\plain \f20 \par 
In this example, the abstract is a document that resides on  a gopher server. By allowing references to to gopher items,  we can also accommodate data that must be sent in an 8-bit  clear stream by using the Gopher+ methods for retrieving  binary data. 
\par 
\par 
If both a reference to an attribute and an explicit value for  the attribute are present in an attribute list, the  preferred version is the explicit value. In the example  below, the preferred version is "the short abstract goes  here". \par 
\par 
\tab }{\f22 +ABSTRACT: 0long abstract\'c6selector\'c6host2\'c6port2\'c6+\par 
       the short abstract goes here\par 
\par 
}{\plain \f20 Note that if you want to have several views of (for example)  an +ABSTRACT this is possible by using a reference to a item  residing on a gopher server because the item can have its  own attributes. \par 
\par 

Attributes names are case sensitive (easier to match and  more of them).  There is no need to "preregister" all  possible attributes since we cannot anticipate all possible  future needs. However it would be reasonable to maintain a  registry for implement
ors and administrators so duplication can be avoided.  Server implementors or administrators can request that new  attributes be included in the attribute registry.\par 
\par 
}{\plain \i\f20 
Dream on: What gets us excited are alternate representations  for directory lists.  Sure, the standard representation for a gopher directory list is known to us  all.  But isn't hypertext (in a WWW sense) an alternate kind  of directory list?  We also envi
sioned a "geographical view"  (GView?) mapping servers onto a map of the world (throw up a  gif picture and then overlay dots based on latitude and longitude or xy  coordinates).  OK.  Dream off.\par 
}{\plain \f20 \par 

 Note that interested parties outside gopherspace have long  and complex wish-lists for "attributes" that all  well-dressed Internet citizens should have.  We don't want to comment on the use or value of these laundry-lists.  Suffice it to say that nothing
 precludes server  administrators from including whatever attributes they see  fit to include. Certainly IAFA blocks are desirable, bearing  UDIs, URL's or whatever else is desired.  The gopher community will probably arrive at a  list of "r
ecommended" attributes that server administrators  should try to support.  Because not every server  administrator sees advantage to cluttering Attribute Info  files with information their  primary users will never need, it does not seem fair to   "force" 
folks to include them; most will just ignore the  harsh protocol guideline and the value of the protocol will  be diminished.  We want to mandate as little as we possibly  can.\par 
\par 
\par 
}{\plain \b\f20 \page 2.6\tab Using Attribute Info: Alternate representations (+VIEWS).\par 
}{\plain \f20 \par 
The user may 
locate a document and wonder if there are   representations of it besides, say, the standard Text.  Using the appropriate client incantation (Option  Double-Click? or whatever) the user indicates a wish to see what's  available.  The client retrieves the  
Attribute Information, displays the list of views to the  user in some kind of scrolling list dialog.  User selects a  line and client now requests the document in say, Postscript  representation:\par 
\par 
}{\f22    the selector\'c6+application/Postscript\par 
}{\plain \f20 \par 
\par 
Smart clients ar
e not precluded from doing things like  "Always get Postscript if you can" or "Always get   Postscript if that is less than 700K in size." etc. And the  "smarter" you make it, the hairier your client will become - unless you are a user interface wizard of 
awesome  proportions. While the example above is of fetching a  document's postscript view, there is nothing precluding  having different views for directories. In the dream  sequence earlier, we imagined a geographic view of a directory. For a client to f
etch that  view, it would say this:\par 
\par 
}{\f22    the selector\'c6+GView\par 
}{\plain \f20 \par 
\par 
}{\plain \b\f20 2.7\tab Getting attributes for all items in a directory in one  transaction.\par 
}{\plain \f20 \par 

Heavyweight/clever/special-purpose clients may want to know  all the attributes of items in a given directory in one transaction. The  "$" command is used to request all the attributes of a  directory at once. For instance, a client might sent the  request
:\par 
\par 
 }{\f22    selector string\'c6$\par 
}{\plain \f20 \par 
 and the server might return this:\par 
\par 
\tab }{\f22 +INFO: 0Salmon dogs\'c6some selector\'c6host2\'c6port2\'c6+\par 
\tab +ADMIN:\par 
}{\plain \f20 \tab }{\f22  Admin: Frodo Gophermeister <fng@bogus.edu> \par 
}{\plain \f20 \tab }{\f22  Mod-Date: August 15, 1992 <19920815185503>\par 
}{\plain \f20 \tab }{\f22 +VIEWS: \par 
}{\plain \f20 \tab }{\f22  Text/plain: <10k>\par 
}{\plain \f20 \tab }{\f22  application/Postscript De_DE: <100k>\par 
}{\plain \f20 \tab }{\f22 +ABSTRACT: \par 
       A great recipe for making salmon\par 
}{\plain \f20 \tab }{\f22 +INFO: 0Hot pups\'c6other selector\'c6host3\'c6port3\'c6+\par 
\tab +ADMIN:\par 
}{\plain \f20 \tab }{\f22  Admin: Bilbo Gophernovice <bng@bogus.edu> \par 
}{\plain \f20 \tab }{\f22  Date: <19910101080003>\par 
}{\plain \f20 \par 
In this example, the server returned the attribute lists for  two items because there were only two items in the  directory.. The client software can easily separate the at
tributes for the  items since each attribute list starts with "+INFO". It is  also easy for the client to use the "$" command to get  directory listings since the gopher item descriptor is on  the +INFO line for each item. \par 
\par 

Note that the $ command is the only way to find the  administrator of a remote link.  To get the full attribute  information for a link on another machine may require asking  the master machine for the item information.  It is possible  to append which att
ributes you are interested in retrieving after the $, eg:\par 
\par 
\tab some directory selector}{\f22 \'c6$+VIEWS\par 
or\par 
}{\plain \f20 \tab other directory selector}{\f22 \'c6$+VIEWS+ABSTRACT\par 
\tab \par 
}{\plain \f20 
The $ command makes it possible for a client that does not  mind burning bandwidth to get attribute information for all items as the user navigates gopherspace. Clients using  2400 bps SLIP links will probably not use this method... but  clients on Etherne
t may not mind. This command may also be useful for building smart indexes of items in gopherspace.  Note that the specific requested  attributes a
re only suggestions to the server that the  client would like less than a full set of attributes.  The  server may choose to ignore the request (if it is not  capable of extracting the required attributes) and return the client the full set anyway.   Other
 caveats:  even if the attributes requested are not  available, the server WILL NOT return an error, but will  send whatever IS available.  It is the client's  responsibility inspect the returned attributes.\par 
\par 
Analogous to use of the $ command, the ! command can also be  used to request certain attribute blocks.\par 
 \par 
\par 
}{\plain \b\f20 2.8\tab Gopher+ Interactive Query items.\par 
}{\plain \f20 \par 
The principle here is based on Roland Schemer's "Q/q" type  ideas. We're calling it the Interactive Query enhancements... \par 
\par 
The server may list items that have a "?" following the port  field:\par 
\par 
}{\f22    0A file\'c6file selector\'c6host\'c6port\'c6?\par 
   1A directory\'c6dir selector\'c6host\'c6port\'c6?\par 
}{\plain \f20 \par 
Now the fact that there's something after the port field means that these are Gopher+ items.  Old clients will still be able to show such ite
ms in lists, but  if they simply send the old style plain selector string to  retrieve them, the server will respond with an old style  error telling them to get an updated client.  New clients will know that before getting one of these items, it will be n
ecessary to  retrieve questions from the server, have the user answer  them, and then feed the answers back to the server along  with the selector. The questions to be asked of the user are  retrieved from the server by looking at the +ASK attribute in the
 item's attribute  information.\par 
\par 
\page When the user selects a query item, the client quickly  connects to the server and requests the Attribute  Information for the item.  Then the client extracts the  information in the +ASK attribute block. Here's an example:\par 
\par 
\tab }{\f22 +INFO: 0inquisitive\'c6moo moo selector\'c6host2\'c6port2\'c6+\par 
\tab +ADMIN\par 
}{\plain \f20 \tab }{\f22  Admin: Frank Gophermeister <fng@bogus.edu>\par 
}{\plain \f20 \tab }{\f22  Mod-Date: August 15, 1992 <19920815185503>\par 
      +ASK: \par 
       Ask: How many volts?\par 
       Choose: Deliver electric shock to administrator now?\'c6Yes\'c6Not!\par 
  \par 
}{\plain \f20   \par 
The client will use all lines in the order they appear in  the +ASK attribute block.  The content will be presented to  the user as questions or prompts or dialogs or something  like that.\par 
\par 
The "Ask" presents the user with a question, supplies a default text answer if it  exists and allows the user to enter a one-line responce.\par 
\par 
The "AskP" presents the user with a question, and bullets out the responce typed in by the user so that someone watching over the user's sholder cannot read the responce. \par 
\par 
The "AskL" presents the user with a question, and ideally should allo the user to enter several lines of responce. \par 
\par 
The "AskF" requests the user for a new local filename,  presumably for stashing the response returned by the server.  It may supply a default filename.\par 
\par 
The "Select" presents the user with a set of options from which the use can select one or many. This is equivalent to Macintosh check boxes.\par 
\par 
The "Choose" presents the user with a few short choices only one of which may be selected at a time. This is equivalent to Macintosh radio buttons.\par 
\par 

The "ChooseF" requests that the user select an existing  local file, presumably for sending to the server.  On some  systems, the client writer or administrator might want to  restrict the selection of such files to the current directory  (ie. not allow pa
ths in the filename to prevent sending   things like password files).\par 
\par 
The n responses harvested from the user are sent on to the 
 server as the first n lines in the dataBlock.  There can only be one file sent, and it will be the remainder of  the dataBlock if any. If there is an AskL the responce is returned with a count of the number of lines entered by the user on a line by itself
, followed by the lines entered by the user.\par 
\par 
Gopher was originally designed as an essentially anonymous  document retrieval protocol to facilitate easy access to  information rather than limited access.  Various kinds of  restrictive mechanisms have been 
implemented at the server  end (for example, access restriction by source IP address);  however if you have sensitive information, we emphasize that putting it under a  Gopher's nose is not a good idea.\par 
\par 
\page 
The folks with a hirsute tendency will have noticed that all  these interactions  are static rather than truly dynamic and  interactive.  In other words, the  server cannot ask different questions in response to different answers.   +ASK does not constitu
te a  scripting language by any  means.\par 
\par 
To do "true" scripting, we have to do one of two things\par 
\par 

1.  Write a full language parser/interpreter into clients.  The server loads a whole script into the client's brain, and the client  "runs" it.   This rather grossly violates the spirit of  simplicity in cross-platform gopher implementation.   However, whe
n and if a standard scripting language is  adopted, there will be room for it in a SCRIPT attribute block.\par 
\par 
2.  Client enters a complex back-and-forth transaction with  the server. This requires the server, cli
ent, or both to  save rather a lot of state.  NOPE!  Server saving state  means holding open a connection or (worse) the server retaining tokens between connections.  Client saving state  means the server has an even worse job to do.\par 
\par 
As Opus the Penguin would say:  a Hairball.\par 
\par 
\par 
}{\plain \b\f20 2.9\tab Gopher+ Pictures, Sounds, Movies.\par 
}{\plain \f20 \par 
A lot of folks need ability to retrieve and display  pictures, but there is no real consensus on ONE format for these pictures.  We don't want to define a type character for every oddball  pic
ture type.  Gopher+ handles Pictures, Movies, and Sounds  by defining three item types: ":" for bitmap images, ";" for  movies, and "<" for sounds (originally I, M, and S were suggested, but they  were informally in use in other ways; the only thing magic 
  about ":", ";", and "<", is that they are the first  characters after '9')  \par 
\par 
Note that there is NO default format  for Pictures, Movies and Sounds; the specific format of the image, movie, or sound  must be gleaned from the +VIEWS information for the item  (eg. Gif, PICT, TIFF, etc.).}{\plain \b\f20 \par 
\page \par 
}\pard \qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\b\f16\fs28 Appendix I\par 
}{\f16\fs28 \par 
}{\plain \b\f20 Required attributes and suggested attributes.\par 
}{\f22 \par 
\par 
}\pard \tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\plain \b\f20 A1.0 The +INFO attribute block\par 
}{\plain \f20 \par 

The +INFO atttribute block is sent whenever an item's attributes are requested.   It is required that the Attribute Information list for an  item must contain a one-line +INFO attribute, and the +INFO  attribute must contain the gopher+ descriptor for the 
item.\par 
\par 
\tab }{\f22 +INFO: 1Nice stuff\'c6/selector\'c6host\'c6port\'c6+\par 
}{\plain \f20 \par 
\par 
}{\plain \b\f20 A2.0 The +ADMIN attribute\par 
}{\plain \f20 \par 
 A Gopher+ server is required to have an +ADMIN block for  every item and the +ADMIN block must contain Admin and a  Mod-Date lines: \par 
}{\f22 \par 
}{\plain \f20 \tab }{\f22 +ADMIN:\par 
}{\plain \f20 \tab }{\f22  Admin: [comments] <administrator e-mail address> \par 
}{\plain \f20 \tab }{\f22  Mod-Date: [comments] <YYYYMMDDhhmmss>\par 
}{\plain \f20 \par 
In addition to the required lines, we recommend that the  +ADMIN attribute of items returned by a full-text search  engine contain a SCORE attribute. The SCORE attribute should  contain the relevance ranking (an integer) of the item. \par 
\par 
\tab }{\f22  Score: relevance-ranking\par 
}{\plain \f20 \par 
We recommend that the +ADMIN attribute of a full-text search  
engine contain a Score-Range attribute. This attribute is  used to specify the range of values taken on by the  relevance ranking scores of items returned by the search engine. The Score-Range makes it possible to  normalize scores from different search en
gine technologies.  The first number is the lower bound, the second number is  the upper bound.\par 
\par 
\tab }{\f22  Score-range: lower-bound upper-bound\par 
}{\plain \f20 \par 
We also recommend that the +ADMIN attribute for the root of the server (i.e. what  you get back when you ask for the attributes of the item  with the empty selector string) also contain these fields:\par 
\par 
}{\f22       Site: the name of the site \par 
      Org: organization or group owning the site \par 
      Loc: city, state, country\par 
      Geog: latitude longitude\par 
       TZ: timezone as gmt-offset\par 
}{\plain \f20 \par 
Other useful attributes might include:\par 
\par 
}{\f22       Provider: who provided this item\par 
\tab Author: who wrote this item\par 
\tab Creation-Date: when it was born <YYYYMMDDhhmmss>\par 
\tab Expiration-Date: when it expires <YYYYMMDDhhmmss>\par 
}{\plain \b\f20 \line A3.0 The +VIEWS attribute\par 
}{\plain \f20 \par 
The +VIEWS attribute is used to specify alternative  representations of an item. The form of the +VIEWS attribute  is: \par 
\par 
\tab }{\f22 +VIEWS: [gopher descriptor]\par 
}{\plain \f20 \tab }{\f22  Content-Type[ viewLanguage]: [<56K>]\par 
}{\plain \f20 \tab }{\f22  Content-Type[ viewLanguage]: [<93K>]\par 
}{\plain \f20 \tab }{\f22  Content-Type[ viewLanguage]: [<77K>]\par 
\par 
}{\plain \f20 Some values for Content-Type are\par 
}{\f22 \par 
    Text/plain, application/Postscript, image/Gif,  image/jpeg, \par 
\par 
}{\plain \f20 Content Types are defined by the Internet Assigned Numbers  Authority (IANA).  To register a new content type send e-mail to  IANA@isi.edu.  For
 a comprehensive list, consult the most  up-to-date MIME Request for Comments (RFC).  A list of  currently defined views may be retrieved by anonymous ftp  from isi.edu in the directory \par 
\par 
}{\f22 /pub/in-notes/MIME/mime-types\par 
}{\plain \f20 \par 

All gopher servers must support the Text/plain view for  readable documents and the application/gopher-menu view (the  basic Gopher+ directory list) for directories.  These are  the views that must be returned by default.  If all a server supports is the d
efault views, then it may  omit the +VIEWS attribute block (although we suggest that it  not do so).\par 
}{\f22 \par 
}{\plain \f20 The viewLanguage is defined as a concatanation of two ISO  standard values, the ISO 639 language code and the ISO-3166 country  code.  \par 
\par 
Some values for viewLanguage are:}{\f22 \par 
\par 
}\pard \ri1480\tx540\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960 {\f22     En_US, De_DE, Es_ES, Se_SE\par 
\par 
\par 
}\pard \tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\plain \b\f20 A4.0 The +ABSTRACT attribute\par 
}{\plain \f20 \par 
The +ABSTRACT attribute is used to specify a short abstract  for the item. The form of the +ABSTRACT attribute is: \par 
\par 
\tab }{\f22 +ABSTRACT: [gopher reference]\par 
 }{\plain \f20 \tab }{\f22  A line of text<CRLF>\par 
}{\plain \f20 \tab }{\f22  another line of text<CRLF>\par 
}{\plain \f20 \tab }{\f22  still another line of text.<CRLF>\par 
\par 
}{\plain \f20 
We recommend that a description of the sorts of information  at the site,  a postal address, a phone number, and the  administrator name for the site be included in the +ABSTRACT attribute for the server root (i.e. what you  get when you ask for the attrib
ute list of the server with  no selector string).\par 
}{\f22 \par 
\page \par 
}\pard \qc\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\plain \b\f16 Appendix II\par 
}{\f16 \par 
}{\b\f22 Paul's NQBNF (Not Quite BNF) for the Gopher+ Enhancements.\par 
}{\f22 \par 
\par 
}\pard \tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\tx9360\tx10080\tx10800\tx11520\tx12240\tx12960\tx13680 {\plain \f20 
Note:  This is modified BNF (as used by the Pascal people) with a few English modifiers thrown in.   Stuff enclosed in '\{\}' can be repeated zero or more times.  Stuff  in '[]' denotes a set of items.  The '-' operator denotes set  subtraction.\par 
\par 
This section is not quite solid yet.  Please send us information on any errors you might notice.\par 
\par 
Directory Entity\par 
\par 
}{\f22 CR-LF     ::= Carriage Return Character followed by Line Feed  character. \par 
Tab       ::= ASCII Tab character\par 
NUL       ::= ASCII NUL character\par 
PLUS      ::= ASCII '+' character\par 
LEFT      ::= ASCII '<' character\par 
RIGHT      ::= ASCII '>' character\par 
OCTET     ::= $00 -> $ff\par 
UNASCII   ::= OCTET - [Tab CR-LF NUL]\par 
UNASCIINOPLUS ::= UNASCII - [PLUS]\par 
UNASCIINOANGLE ::= UNASCII - [LEFT, RIGHT]\par 
Lastline  ::= '.'CR-LF\par 
TextBlock ::= Block of ASCII text not containing Lastline pattern.\par 
Type      ::= UNASCII\par 
DisplayString ::= \{UNASCII\}\par 
Selector  ::= \{UNASCII\}\par 
Otherflds ::= \{UNASCII + TAB\}\par 
Host      ::= \{\{UNASCII - ['.']\} '.'\} \{UNASCII - ['.']\}\par 
}{\plain \f20 \par 
\par 
Note: This is a Fully Qualified Domain Name as defined in RFC  830. (e.g. gopher.micro.umn.edu)  Hosts that have a CR-LF  TAB or NUL  in their name get what they deserve.\par 
\par 
}{\f22 Digit     ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8'  | '9'\par 
DigitSeq  ::= digit \{digit\}.\par 
Port      ::= DigitSeq.\par 
\par 
}{\plain \f20 Note: Port corresponds the the TCP Port Number, its value should be in the range  [0..65535]; port 70 is officially assigned to gopher.\par 
}{\f22 \par 
\par 
Bool      ::= '0' | '1'\par 
G+Field   ::= '+' | '?'\par 
\par 
Success   ::= '+' | '-'.\par 
Transfer  ::= DigitSeq | '-1' | '-2'\par 
DataHead  ::= Success Transfer CR-LF\par 
DataBlock ::= DataHead \{OCTET\}\par 
 \par 
G1DirEntity ::= Type DisplayString Tab Selector Tab Host Tab Port  Tab Otherflds CR-LF \par 
G+DirEntity ::= Type DisplayString Tab Selector Tab Host Tab Port  Tab G+Field     \par 
                CR-LF \par 
}{\plain \f20 \par 
\par 
Notes:\par 
   It is *highly* recommended that the DisplayString field contain only printable  characters, since many different clients will be using it.   However if eight bit characters are used, the characters should  conform w
ith the ISO-Latin1 Character Set.  The length of the  User displayable line should be less than 70 Characters; longer lines  may not fit across some screens. Warning! The Selector string can  be longer than 255 characters. \par 
\par 
}{\f22 Menu Entity\par 
Menu      ::= DataHead \{G+DirEntity\}.\par 
\par 
Continues ::= Bool\par 
Representation ::= 'Text' | 'List'  | 'Postscript' | 'MacWriteII' | 'RTF' |\{UNASCII\}\par 
}{\plain \f20 \par 
\par 
}{\plain \b\f20 Retrieving a document/menu/etc.:\par 
}{\plain \f20 \par 
C: Opens Connection\par 
S: Accepts Connection\par 
C: Sends Selector String Tab '+' Representation [Tab DataFlag]\par 
C: [Optional] Client sends a DataBlock depending on value of DataFlag.\par 
S: Sends DataBlock\par 
Connection is closed by either client or server (typically  server).\par 
\par 
}{\f22 Spaceline    ::= ' ' \{UNASCII\} CR-LF\par 
Blockname\tab  ::=  '+' \{UNASCIINOPLUS\}\par 
Attrblock    ::= Blockname ' ' [G+Direntry] CR-LF  \{Spaceline\}\par 
Attrval      ::= SPACE \{UNASCII\} CR-LF\par 
E-Mail       ::= \{UNASCII\} s.t. it conforms to RFC 822\par 
Adminval     ::= ' Admin:' \{UNASCII\} '<'  E-Mailaddr '>' CR-LF\par 
Dateval      ::= ' Mod-Date:' \{UNASCII\} '<' YYYYMMDDhhmmss '>'  CR-LF\par 
AdminReq     ::= AdminVal Dateval\par 
Infoblock    ::= '+INFO: ' G+Direntry CR-LF\par 
AdminBlock    ::= '+ADMIN: ' \{G+Direntry\} CR-LF AdminReq  \{Attrval\}\par 
Language     ::= 'English' | 'French' | 'German' | \{UNASCII\}\par 
ViewVal      ::= ' ' Representation [' ' Language] ":"  ASCIINOANGLE '<' \par 
                 Size 'k>' CR-LF\par 
ViewBlock    ::= '+VIEWS: ' \{G+Direntry\} CR-LF \{ViewVal\}\par 
AttrBlocks   ::= InfoBlock ViewBlock \{AttrBlock\}\par 
}{\plain \f20 \par 
\par 
}{\plain \b\f20 Retrieving item Information.\par 
 \par 
}{\plain \f20 For non-index server (non-type 7 items)\par 
\par 
C: Opens Connection\par 
S: Accepts Connection\par 
C: Sends Selector String Tab '!' \{BlockName\}CR-LF\par 
S: Sends DataBlock with data in }{\f22 AttrrBlocks}{\plain \f20  format.\par 
Connection is closed by either client or server (typically  server).\par 
}{\plain \b\f20 \par 
\par 
}{\plain \f20 For index server (type 7 items) the client asks the search engine to so a search for nothing\par 
(i.e. the client does not provide any words to search for) and appends a TAB and a "!" after the null-search:\par 
\par 
C: Opens Connection\par 
S: Accepts Connection\par 
C: Sends Selector String Tab Tab '!' \{BlockName\}CR-LF\par 
S: Sends DataBlock with data in }{\f22 AttrrBlocks}{\plain \f20  format.\par 
Connection is closed by either client or server (typically  server).\par 
}{\plain \b\f20 \par 
}{\f22 Attributes ::= \{AttrBlocks\}\par 
}{\plain \b\f20 \par 
\par 
Retrieving all Item Information entries for a directory.\par 
}{\plain \f20 \par 
C: Opens Connection\par 
S: Accepts Connection\par 
C: Sends Selector String Tab '$'\{BlockName\} CR-LF\par 
S: Sends DataBlock with data in }{\f22 Attributes}{\plain \f20  format.\par 
Connection is closed by either client or server (typically  server).\par 
}{\plain \par 
\par 
}}